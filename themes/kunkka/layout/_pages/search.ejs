---
layout: layout
---
<style>
.search-keyword {color: #cf0000;font-weight: bold;}
#no-match {display: block;}
#no-match.matched {display: none;}
</style>

<script id="result-template" type="text/custom-template">
<section class="post">
    <header class="post-header">
        <h2 class="post-title">
            <a href="{{url}}" class="search-result-title">{{title}}</a>
        </h2>
    </header>
    <article class="post-body">{{result}}</article>
</section>
</script>

<main id="primary">
    <div id="search-result"></div>
    <h1 id="no-match" class="matched"><%= __('no_match') %></h1>
</main>
<!-- #primary -->
<script type="text/javascript">
/* from https://stackoverflow.com/a/901144 */
function URLParam(name, url) {
    url = url || window.location.href;
    var regex = new RegExp("[?&]" + name.replace(/[\[\]]/g, "\\$&") + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return "";
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

function doSearch(path, keyword, containerSelector) {
    keyword = (keyword || "").trim();
    if(keyword.length == 0)
        return;

    $.get({
        url: path, dataType: "xml"
    }).then(function(data) {
        return $("entry", data).map(function() {
            var content = $($("content", this).text()).wrapAll("<div>").parent();
            // remove style/script/code line number in post content
            content.find("script,style,.gutter").remove();
            return {
                title: $("title", this).text(),
                url: $("url", this).text(),
                // .html() can oly get its first child, so wrap in a div
                content: content.text()
            }
        }).get();
    }).then(function(data) {
        var keywords = keyword.toLowerCase().split(/\s+/);
        return data.reduce(function(result, item) {
            var title = item.title.toLowerCase(),
                outputContent = item.content.replace(/<[^>]+>/g,""),
                content = outputContent.toLowerCase(),
                titleFound = -1, contentFound = -1, firstOccur = -1;
            // only match articles with non-empty titles and contents
            if(title && content) {
                keywords.forEach(function(key, i) {
                    titleFound = title.indexOf(key);
                    contentFound = content.indexOf(key);
                    if(titleFound != -1 || contentFound != -1) {
                        if(contentFound == -1)
                            contentFound = 0;
                        if(!i)
                            firstOccur = contentFound;
                    }
                });
            }
            // show search results
            if(firstOccur != -1) {
                var start = Math.max(firstOccur - 20, 0),
                    end = Math.min(start ? firstOccur + 80 : 100, content.length),
                    output = outputContent.substring(start, end);
                keywords.forEach(function(key) {
                    output = output.replace(new RegExp(key, "gi"), '<span class="search-keyword">' + key + '</span>');
                });
                item.result = (start ? "..." : "") + output + (end == content.length ? "" : "...");
                result.push(item);
            }
            return result;
        }, []);
    }).then(function(data) {
        if(!data.length)
            $("#no-match").removeClass("matched");
        else {
            var template = $("#result-template").html().split(/\{\{([^\}]+)\}\}/g);
            $(containerSelector).append(data.map(function(item) {
                return template.map(function(tok, i) {
                    return (i % 2) ? item[tok] : tok;
                }).join('');
            }));
        }
    });
}

$(function() {
    doSearch('<%- url_for(config.search.path) %>', URLParam("keywords"), "#search-result");
});
</script>
